import tkinter as tk
from tkinter import messagebox
import math

class ScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Scientific Calculator")
        self.root.geometry("400x600")
        self.root.resizable(False, False)
        
        self.result_var = tk.StringVar()

        # Entry widget for display
        self.display = tk.Entry(root, textvariable=self.result_var, font=("Arial", 24), bd=10, relief="sunken", justify="right")
        self.display.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

        # Buttons layout
        buttons = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
            ('0', 4, 0), ('.', 4, 1), ('+', 4, 2), ('=', 4, 3),
            ('sin', 5, 0), ('cos', 5, 1), ('tan', 5, 2), ('C', 5, 3),
            ('ln', 6, 0), ('log10', 6, 1), ('^', 6, 2), ('sqrt', 6, 3),
            ('(', 7, 0), (')', 7, 1), ('DEL', 7, 2), ('e^x', 7, 3)
        ]

        # Adding buttons to the grid
        for (text, row, col) in buttons:
            tk.Button(root, text=text, font=("Arial", 18), command=lambda t=text: self.on_button_click(t)).grid(row=row, column=col, padx=10, pady=10, sticky="nsew")

        # Configure rows and columns to scale
        for i in range(8):
            self.root.grid_rowconfigure(i, weight=1)
        for j in range(4):
            self.root.grid_columnconfigure(j, weight=1)

    def on_button_click(self, button_text):
        if button_text == "=":
            self.calculate_result()
        elif button_text == "C":
            self.result_var.set("")
        elif button_text == "DEL":
            self.result_var.set(self.result_var.get()[:-1])
        elif button_text in {"sin", "cos", "tan", "ln", "log10", "sqrt", "e^x"}:
            # Add function name to the display
            self.result_var.set(self.result_var.get() + button_text + "(")
        else:
            self.result_var.set(self.result_var.get() + button_text)

    def calculate_result(self):
        try:
            # Replace math functions with their equivalents in eval
            expression = self.result_var.get()
            expression = expression.replace("sin", "math.sin(math.radians")
            expression = expression.replace("cos", "math.cos(math.radians")
            expression = expression.replace("tan", "math.tan(math.radians")
            expression = expression.replace("ln", "math.log")  # Natural log
            expression = expression.replace("log10", "math.log10")  # Log base 10
            expression = expression.replace("sqrt", "math.sqrt")
            expression = expression.replace("e^x", "math.exp")  # Exponential function
            expression = expression.replace("^", "**")  # Fix power function
            
            # Evaluate the expression
            result = eval(expression + ")" * expression.count("("))  # Auto-close parentheses
            self.result_var.set(result)
        except Exception:
            # Display error message directly in the calculator display
            self.result_var.set("Instructions unclear")

if __name__ == "__main__":
    root = tk.Tk()
    calculator = ScientificCalculator(root)
    root.mainloop()
